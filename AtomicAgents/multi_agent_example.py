import os
from typing import Union
import instructor
import openai
from rich.console import Console
from typing import Union
import openai
from datetime import datetime
from pydantic import Field
from atomic_agents import AtomicAgent, AgentConfig, BaseIOSchema
from atomic_agents.context import SystemPromptGenerator, BaseDynamicContextProvider
from dotenv import load_dotenv

load_dotenv()

from tools.searxng_search import (
    SearXNGSearchTool,
    SearXNGSearchToolConfig,
    SearXNGSearchToolInputSchema,
    SearXNGSearchToolOutputSchema,
)
from tools.calculator import (
    CalculatorTool,
    CalculatorToolConfig,
    CalculatorToolInputSchema,
    CalculatorToolOutputSchema,
)

class CurrentDateProvider(BaseDynamicContextProvider):
    def __init__(self, title):
        super().__init__(title)
        self.date = datetime.now().strftime("%Y-%m-%d")

    def get_info(self) -> str:
        return f"Current date in format YYYY-MM-DD: {self.date}"
    
class OrchestratorInputSchema(BaseIOSchema):
    """Input schema for the Orchestrator Agent. Contains the user's message to be processed."""

    chat_message: str = Field(..., description="The user's input message to be analyzed and responded to.")


class OrchestratorOutputSchema(BaseIOSchema):
    """Combined output schema for the Orchestrator Agent. Contains the tool parameters."""

    tool_parameters: Union[SearXNGSearchToolInputSchema, CalculatorToolInputSchema] = Field(
        ..., description="The parameters for the selected tool"
    )

class FinalAnswerSchema(BaseIOSchema):
    """Schema for the final answer generated by the Orchestrator Agent."""

    final_answer: str = Field(..., description="The final answer generated based on the tool output and user query.")


class OrchestratorAgentConfig(AgentConfig):
    """Configuration for the Orchestrator Agent."""

    searxng_config: SearXNGSearchToolConfig
    calculator_config: CalculatorToolConfig
    
client = instructor.from_openai(openai.OpenAI(api_key=os.getenv("GEMINI_API_KEY"),
                                            base_url=os.getenv("GEMINI_BASE_URL")))
orchestrator_agent_config = AgentConfig(
    client=client,
    model="gemini-2.5-flash",
    system_prompt_generator=SystemPromptGenerator(
        background=[
            "You are an Orchestrator Agent that decides between using a search tool or a calculator tool based on user input.",
            "Use the search tool for queries requiring factual information, current events, or specific data.",
            "Use the calculator tool for mathematical calculations and expressions.",
        ],
        output_instructions=[
            "Analyze the input to determine whether it requires a web search or a calculation.",
            "You MUST choose only one tool. If you output a list, the system will fail." ,
            "Your response MUST be a single ONE valid JSON object.",
            "For search queries, use the 'search' tool and provide 1-3 relevant search queries.",
            "For calculations and math expressions, use the 'calculator' tool and provide the mathematical expression to evaluate.",
            "The mathematical expression MUST be unique and not divided in two tools calls.",   
            "Example 1",
            "Who won the oscar in 2023",
            "Choose the SearXNG tool and return a JSON like this {'query': 'Who won the oscar in 2023'}",
            "Example 2",
            "Calculate 10 times 30 to the second power",
            "Choose the calculator tool and return a single JSON like this {'expression': '(10 * 30)Â²'}",
        ],
    ),
)
orchestrator_agent = AtomicAgent[OrchestratorInputSchema, OrchestratorOutputSchema](config=orchestrator_agent_config)
orchestrator_agent_final = AtomicAgent[OrchestratorInputSchema, FinalAnswerSchema](config=orchestrator_agent_config)

orchestrator_agent.register_context_provider("current_date", CurrentDateProvider("Current Date"))
orchestrator_agent_final.register_context_provider("current_date", CurrentDateProvider("Current Date"))


def execute_tool(
    searxng_tool: SearXNGSearchTool, calculator_tool: CalculatorTool, orchestrator_output: OrchestratorOutputSchema
) -> Union[SearXNGSearchToolOutputSchema, CalculatorToolOutputSchema]:
    if isinstance(orchestrator_output.tool_parameters, SearXNGSearchToolInputSchema):
        return searxng_tool.run(orchestrator_output.tool_parameters)
    elif isinstance(orchestrator_output.tool_parameters, CalculatorToolInputSchema):
        return calculator_tool.run(orchestrator_output.tool_parameters)
    else:
        raise ValueError(f"Unknown tool parameters type: {type(orchestrator_output.tool_parameters)}")
    


if __name__ == "__main__":
    import os
    from dotenv import load_dotenv
    from rich.console import Console
    from rich.panel import Panel
    from rich.syntax import Syntax

    load_dotenv()

    
    client = instructor.from_openai(openai.OpenAI(api_key=os.getenv("GEMINI_API_KEY"),
                                            base_url=os.getenv("GEMINI_BASE_URL")))

    console = Console()

    searxng_tool = SearXNGSearchTool(SearXNGSearchToolConfig(base_url=os.getenv("SEARXNG_URL"), max_results=5))
    calculator_tool = CalculatorTool(CalculatorToolConfig())

    console.print(Panel(orchestrator_agent.system_prompt_generator.generate_prompt(), title="System Prompt", expand=False))
    console.print("\n")

    inputs = [
        "Please calculate the sine of pi/3 to the third power",
    ]
    for user_input in inputs:
        console.print(Panel(f"[bold cyan]User Input:[/bold cyan] {user_input}", expand=False))

        input_schema = OrchestratorInputSchema(chat_message=user_input)

        console.print("\n[bold yellow]Generated Input Schema:[/bold yellow]")
        input_syntax = Syntax(str(input_schema.model_dump_json(indent=2)), "json", theme="monokai", line_numbers=True)
        console.print(input_syntax)
        
        orchestrator_output = orchestrator_agent.run(input_schema)

        console.print("\n[bold magenta]Orchestrator Output:[/bold magenta]")
        orchestrator_syntax = Syntax(
            str(orchestrator_output.model_dump_json(indent=2)), "json", theme="monokai", line_numbers=True
        )
        console.print(orchestrator_syntax)

        response = execute_tool(searxng_tool, calculator_tool, orchestrator_output)

        console.print("\n[bold green]Tool Output:[/bold green]")
        output_syntax = Syntax(str(response.model_dump_json(indent=2)), "json", theme="monokai", line_numbers=True)
        console.print(output_syntax)

        console.print("\n" + "-" * 80 + "\n")

        history = orchestrator_agent.history
        orchestrator_agent = orchestrator_agent_final
        orchestrator_agent.history = history
        orchestrator_agent.history.add_message("system", response)
        final_answer = orchestrator_agent.run(input_schema)
        console.print(f"\n[bold blue]Final Answer:[/bold blue] {final_answer.final_answer}")

        orchestrator_agent = AtomicAgent[OrchestratorInputSchema, OrchestratorOutputSchema](config=orchestrator_agent_config)